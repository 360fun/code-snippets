
# Declare project language.
# @link http://about.travis-ci.org/docs/user/languages/php/
language: php

# Use container-based infrastructure
sudo: false

# Declare versions of PHP to use. Use one decimal max.
php:
  - "5.5"
  - "5.4"
  - "5.6"

env:
  # Trunk
  - WP_VERSION=master WP_MULTISITE=0
  - WP_VERSION=master WP_MULTISITE=1

  # Latest stable version
  - WP_VERSION=stable WP_MULTISITE=0
  - WP_VERSION=stable WP_MULTISITE=1


# Prepare the system by installing prerequisites and dependencies.
# Failures in this section will result in build status 'errored'.
before_install:
  - composer self-update
  - npm install -g grunt-cli

# Prepare your build for testing.
# Failures in this section will result in build status 'errored'.
before_script:

  # set up variables
  - pwd
  - PROJECT_DIR=$(pwd)
  - plugin_slug=$(basename $(pwd))
  - plugin_dir=$WP_DEVELOP_DIR/src/wp-content/plugins/$plugin_slug

  # set up WP install
  - export WP_DEVELOP_DIR=/tmp/wordpress
  - mkdir -p $WP_DEVELOP_DIR
  - git clone --depth=1 git://develop.git.wordpress.org/ $WP_DEVELOP_DIR/
  - cd $WP_DEVELOP_DIR
  - if [[ $WP_VERSION == 'stable' ]]; then git fetch --tags; export WP_VERSION=$(git tag | sort -n | tail -1); fi
  - git checkout $WP_VERSION

  # Build plugin
  - cd $PROJECT_DIR
  - composer install
  - vendor/bin/phpcs --config-set installed_paths vendor/wp-coding-standards/wpcs
  - npm install
  - grunt
  - grunt deploy
  - mv $PROJECT_DIR/deploy $plugin_dir

  # Set up WordPress configuration.
  - cd $WP_DEVELOP_DIR
  - echo $WP_DEVELOP_DIR
  - cp wp-tests-config-sample.php wp-tests-config.php
  - sed -i "s/youremptytestdbnamehere/wordpress_test/" wp-tests-config.php
  - sed -i "s/yourusernamehere/root/" wp-tests-config.php
  - sed -i "s/yourpasswordhere//" wp-tests-config.php
  # Create WordPress database.
  - mysql -e 'CREATE DATABASE wordpress_test;' -uroot
  # Change into plugin directory.
  - cd $plugin_dir

# Run test script commands
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:

  # Search for PHP syntax errors.
  - find . -maxdepth 1 \( -name '*.php' \) -exec php -lf {} \;
  - find php/ \( -name '*.php' \) -exec php -lf {} \;

  # Run Grunt tests
  - grunt test
